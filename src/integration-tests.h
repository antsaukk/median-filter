#pragma once

#include <vector>

#include "median-filter.h"

void TestResult1() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 1;
	const int hx = 1;

	const std::vector<float> expectedResult = {
		0, 	 0, 0.5, 0, 0, 
		0,   0, 1, 	 0, 0, 
		0.5, 1, 1, 	 1, 0.5, 
		0, 	 0, 1, 	 0, 0, 
		0, 	 0, 0.5, 0, 0
	};

	const std::vector<float> inputData = {
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 1, 1, 1, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 0, 0
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult2() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 1;
	const int hx = 1;

	const std::vector<float> expectedResult = {
		0.86405,  0.860258, 0.733684, 0.470263, 0.470263, 
		0.680972, 0.547221, 0.547221, 0.308167, 0.427524, 
		0.935441, 0.913376, 0.632359, 0.546881, 0.58962, 
		0.63653,  0.725839, 0.957507, 0.964889, 0.961028, 
		0.841673, 0.96405, 0.967741, 0.969144, 0.966292
	};

	const std::vector<float> inputData = {
		0.814724,  0.135477, 0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376, 0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221, 0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507, 0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839, 0.970593, 0.98111, 0.957167
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult3() {
	const int ny = 7;
	const int nx = 5;
	const int hy = 1;
	const int hx = 1;

	const std::vector<float> expectedResult = {
		0.86405,  0.860258, 0.733684, 0.470263, 0.470263, 
		0.680972, 0.547221, 0.547221, 0.308167, 0.427524, 
		0.935441, 0.913376, 0.632359, 0.546881, 0.58962, 
		0.63653,  0.725839, 0.957507, 0.964889, 0.961028, 
		0.605607, 0.798106, 0.957507, 0.964889, 0.961028, 
		0.14975,  0.421761, 0.725839, 0.80028,  0.858008, 
		0.125874, 0.281824, 0.453568, 0.609934, 0.548655
	};

	const std::vector<float> inputData = {
		0.814724,  0.135477,   0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376,   0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221,   0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507,   0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839,   0.970593, 0.98111,  0.957167, 
		0.109862,  0.485376,   0.798106, 0.80028,  0.297029, 
		0.141886,  0.00478345, 0.421761, 0.112464, 0.915735
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult4() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 1;
	const int hx = 3;

	const std::vector<float> expectedResult = {
		0.824866, 0.723541, 0.723541, 0.723541, 0.470263, 
		0.58979,  0.546881, 0.546881, 0.546881, 0.427524, 
		0.772868, 0.632359, 0.632359, 0.632359, 0.58979, 
		0.841673, 0.957167, 0.957167, 0.957167, 0.957337, 
		0.967741, 0.966292, 0.966292, 0.966292, 0.966292
	};

	const std::vector<float> inputData = {
		0.814724,  0.135477,   0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376,   0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221,   0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507,   0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839,   0.970593, 0.98111,  0.957167
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult5() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 3;
	const int hx = 1;

	const std::vector<float> expectedResult = {
		0.86405,  0.860258, 0.733684, 0.58962,  0.58962, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.819607, 0.819607, 0.819607, 0.794763, 0.794763

	};

	const std::vector<float> inputData = {
		0.814724,  0.135477,   0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376,   0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221,   0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507,   0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839,   0.970593, 0.98111,  0.957167
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult6() {
	const int ny = 7;
	const int nx = 7;
	const int hy = 1;
	const int hx = 3;

	const std::vector<float> expectedResult = {
		0.470263, 0.427694, 0.427694, 0.427694, 0.427694, 0.427694, 0.412859,
		0.723541, 0.632359, 0.723541, 0.632359, 0.733684, 0.835009, 0.691115,
		0.841503, 0.725839, 0.679099, 0.632359, 0.715232, 0.547221, 0.516298,
		0.878724, 0.80028,  0.76306,  0.798106, 0.856921, 0.798106, 0.641741,
		0.796244, 0.725839, 0.647752, 0.725839, 0.723974, 0.655741, 0.579702,
		0.500529, 0.503663, 0.571713, 0.655741, 0.667238, 0.678735, 0.667238,
		0.715985, 0.715985, 0.66855,  0.680047, 0.736783, 0.739644, 0.680047


	};

	const std::vector<float> inputData = {
		0.814724,  0.135477, 0.905792, 0.835009,   0.126987, 0.968868, 0.913376,
		0.221034,  0.632359, 0.308167, 0.0975404,  0.547221, 0.278498, 0.188382, 
		0.546881,  0.992881, 0.957507, 0.996461,   0.964889, 0.967695, 0.157613,
		0.725839,  0.970593, 0.98111,  0.957167,   0.109862, 0.485376, 0.798106, 
		0.80028,   0.297029, 0.141886, 0.00478345, 0.421761, 0.112464, 0.915735, 
		0.639763,  0.792207, 0.878431, 0.959492,   0.503663, 0.655741, 0.797929, 
		0.0357116, 0.361294, 0.849129, 0.211924,   0.933993, 0.68136,  0.678735 
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult7() {
	const int ny = 7;
	const int nx = 7;
	const int hy = 3;
	const int hx = 1;

	const std::vector<float> expectedResult = {
		0.679099, 0.770281, 0.931479, 0.8704,   0.691115, 0.516298, 0.641741, 
		0.679099, 0.725839, 0.835009, 0.547221, 0.485376, 0.485376, 0.641741, 
		0.682801, 0.759023, 0.85672,  0.691115, 0.525442, 0.525442, 0.726835, 
		0.636061, 0.725839, 0.835009, 0.835009, 0.547221, 0.655741, 0.680047, 
		0.636061, 0.682801, 0.820668, 0.698175, 0.525442, 0.601481, 0.667238, 
		0.682801, 0.792207, 0.878431, 0.878431, 0.655741, 0.678735, 0.680047, 
		0.682801, 0.759023, 0.820668, 0.676396, 0.494519, 0.667238, 0.680047


	};

	const std::vector<float> inputData = {
		0.814724,  0.135477, 0.905792, 0.835009,   0.126987, 0.968868, 0.913376, 
		0.221034,  0.632359, 0.308167, 0.0975404,  0.547221, 0.278498, 0.188382, 
		0.546881,  0.992881, 0.957507, 0.996461,   0.964889, 0.967695, 0.157613, 
		0.725839,  0.970593, 0.98111,  0.957167,   0.109862, 0.485376, 0.798106, 
		0.80028,   0.297029, 0.141886, 0.00478345, 0.421761, 0.112464, 0.915735, 
		0.639763,  0.792207, 0.878431, 0.959492,   0.503663, 0.655741, 0.797929, 
		0.0357116, 0.361294, 0.849129, 0.211924,   0.933993, 0.68136,  0.678735
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult8() {
	const int ny = 5;
	const int nx = 7;
	const int hy = 3;
	const int hx = 3;

	const std::vector<float> expectedResult = {
		0.824866, 0.770281, 0.770281, 0.761972, 0.816557, 0.816557, 0.672663, 
		0.76306,  0.632359, 0.58979,  0.632359, 0.58979,  0.547221, 0.516298, 
		0.76306,  0.632359, 0.58979,  0.632359, 0.58979,  0.547221, 0.516298, 
		0.76306,  0.632359, 0.58979,  0.632359, 0.58979,  0.547221, 0.516298, 
		0.679099, 0.58979,  0.547051, 0.547051, 0.516298, 0.453568, 0.453568
	};

	const std::vector<float> inputData = {
		0.814724, 0.135477, 0.905792, 0.835009,   0.126987, 0.968868, 0.913376, 
		0.221034, 0.632359, 0.308167, 0.0975404,  0.547221, 0.278498, 0.188382, 
		0.546881, 0.992881, 0.957507, 0.996461,   0.964889, 0.967695, 0.157613, 
		0.725839, 0.970593, 0.98111,  0.957167,   0.109862, 0.485376, 0.798106, 
		0.80028,  0.297029, 0.141886, 0.00478345, 0.421761, 0.112464, 0.915735
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult9() {
	const int ny = 7;
	const int nx = 5;
	const int hy = 3;
	const int hx = 3;

	const std::vector<float> expectedResult = {
		0.824866, 0.723541, 0.723541, 0.723541, 0.58979, 
		0.824866, 0.814724, 0.814724, 0.814724, 0.780424, 
		0.799193, 0.761972, 0.761972, 0.761972, 0.761972, 
		0.679099, 0.632359, 0.632359, 0.632359, 0.679099, 
		0.58979,  0.58979,  0.58979,  0.58979,  0.679099, 
		0.516298, 0.547221, 0.547221, 0.547221, 0.761972, 
		0.761972, 0.799193, 0.799193, 0.799193, 0.858008,

	};

	const std::vector<float> inputData = {
		0.814724,  0.135477,   0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376,   0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221,   0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507,   0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839,   0.970593, 0.98111,  0.957167, 
		0.109862,  0.485376,   0.798106, 0.80028,  0.297029, 
		0.141886,  0.00478345, 0.421761, 0.112464, 0.915735
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult10() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 7;
	const int hx = 3;

	const std::vector<float> expectedResult = {
		0.824866, 0.814724, 0.814724, 0.814724, 0.780424, 
		0.824866, 0.814724, 0.814724, 0.814724, 0.780424, 
		0.824866, 0.814724, 0.814724, 0.814724, 0.780424, 
		0.824866, 0.814724, 0.814724, 0.814724, 0.780424, 
		0.824866, 0.814724, 0.814724, 0.814724, 0.780424
	};

	const std::vector<float> inputData = {
		0.814724,  0.135477, 0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376, 0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221, 0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507, 0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839, 0.970593, 0.98111,  0.957167
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult11() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 3;
	const int hx = 7;

	const std::vector<float> expectedResult = {
		0.723541, 0.723541, 0.723541, 0.723541, 0.723541, 
		0.814724, 0.814724, 0.814724, 0.814724, 0.814724, 
		0.814724, 0.814724, 0.814724, 0.814724, 0.814724, 
		0.814724, 0.814724, 0.814724, 0.814724, 0.814724, 
		0.819607, 0.819607, 0.819607, 0.819607, 0.819607
	};

	const std::vector<float> inputData = {
		0.814724,  0.135477, 0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376, 0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221, 0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507, 0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839, 0.970593, 0.98111, 0.957167
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult12() {
	const int ny = 5;
	const int nx = 5;
	const int hy = 17;
	const int hx = 1;

	const std::vector<float> expectedResult = {
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684, 
		0.770281, 0.814724, 0.835009, 0.835009, 0.733684
	};

	const std::vector<float> inputData = {
		0.814724,  0.135477, 0.905792, 0.835009, 0.126987, 
		0.968868,  0.913376, 0.221034, 0.632359, 0.308167, 
		0.0975404, 0.547221, 0.278498, 0.188382, 0.546881, 
		0.992881,  0.957507, 0.996461, 0.964889, 0.967695, 
		0.157613,  0.725839, 0.970593, 0.98111,  0.957167
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult13() {
	const int ny = 5;
	const int nx = 7;
	const int hy = 1;
	const int hx = 17;

	const std::vector<float> expectedResult = {
		0.427694, 0.427694, 0.427694, 0.427694, 0.427694, 0.427694, 0.427694, 
		0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 
		0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 
		0.798106, 0.798106, 0.798106, 0.798106, 0.798106, 0.798106, 0.798106, 
		0.605607, 0.605607, 0.605607, 0.605607, 0.605607, 0.605607, 0.605607
	};

	const std::vector<float> inputData = {
		0.814724, 0.135477, 0.905792, 0.835009,   0.126987, 0.968868, 0.913376, 
		0.221034, 0.632359, 0.308167, 0.0975404,  0.547221, 0.278498, 0.188382, 
		0.546881, 0.992881, 0.957507, 0.996461,   0.964889, 0.967695, 0.157613, 
		0.725839, 0.970593, 0.98111,  0.957167,   0.109862, 0.485376, 0.798106, 
		0.80028,  0.297029, 0.141886, 0.00478345, 0.421761, 0.112464, 0.91573
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult14() {
	const int ny = 5;
	const int nx = 7;
	const int hy = 3;
	const int hx = 7;

	const std::vector<float> expectedResult = {
		0.761972, 0.761972, 0.761972, 0.761972, 0.761972, 0.761972, 0.761972, 
		0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 
		0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 
		0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 0.632359, 
		0.547051, 0.547051, 0.547051, 0.547051, 0.547051, 0.547051, 0.547051
	};

	const std::vector<float> inputData = {
		0.814724, 0.135477, 0.905792, 0.835009,   0.126987, 0.968868, 0.913376, 
		0.221034, 0.632359, 0.308167, 0.0975404,  0.547221, 0.278498, 0.188382, 
		0.546881, 0.992881, 0.957507, 0.996461,   0.964889, 0.967695, 0.157613, 
		0.725839, 0.970593, 0.98111,  0.957167,   0.109862, 0.485376, 0.798106, 
		0.80028,  0.297029, 0.141886, 0.00478345, 0.421761, 0.112464, 0.915735
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}

void TestResult15() {
	const int ny = 5;
	const int nx = 7;
	const int hy = 7;
	const int hx = 3;

	const std::vector<float> expectedResult = {
		0.76306, 0.632359, 0.58979, 0.632359, 0.58979, 0.547221, 0.516298, 
		0.76306, 0.632359, 0.58979, 0.632359, 0.58979, 0.547221, 0.516298, 
		0.76306, 0.632359, 0.58979, 0.632359, 0.58979, 0.547221, 0.516298, 
		0.76306, 0.632359, 0.58979, 0.632359, 0.58979, 0.547221, 0.516298, 
		0.76306, 0.632359, 0.58979, 0.632359, 0.58979, 0.547221, 0.516298
	};

	const std::vector<float> inputData = {
		0.814724, 0.135477, 0.905792, 0.835009,   0.126987, 0.968868, 0.913376, 
		0.221034, 0.632359, 0.308167, 0.0975404,  0.547221, 0.278498, 0.188382, 
		0.546881, 0.992881, 0.957507, 0.996461,   0.964889, 0.967695, 0.157613, 
		0.725839, 0.970593, 0.98111,  0.957167,   0.109862, 0.485376, 0.798106, 
		0.80028,  0.297029, 0.141886, 0.00478345, 0.421761, 0.112464, 0.915735
	};

	std::vector<float> outputData(ny*nx);

	mf<float>(ny, nx, hy, hx, inputData.data(), outputData.data());

	ASSERT_EQUAL(outputData, expectedResult);
}